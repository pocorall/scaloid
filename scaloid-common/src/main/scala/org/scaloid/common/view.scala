/* 
 *
 * 
 *
 *
 * Less painful Android development with Scala
 *
 * http://scaloid.org
 *
 *
 *
 *
 *
 *
 * Copyright 2013 Sung-Ho Lee
 *
 * Sung-Ho Lee licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

/*
 * This file is automatically generated. Any changes on this file will be overwritten!
 */

package org.scaloid.common

import android.app._
import android.content._
import android.view._
import android.view.View._
import android.widget._
import scala.collection.mutable.ArrayBuffer
import scala.language.implicitConversions
import ViewImplicits._


class RichView[V <: android.view.View](val basis: V) extends TraitView[V]

trait TraitView[V <: android.view.View] extends ConstantsSupport {

  def basis: V

  def find[V <: View](id: Int): V = basis.findViewById(id).asInstanceOf[V]

  def uniqueId(implicit activity: Activity): Int = {
    if(basis.getId < 0) {
      basis.setId(getUniqueId)
    }
    basis.getId
  }

  val FILL_PARENT = ViewGroup.LayoutParams.FILL_PARENT
  val MATCH_PARENT = ViewGroup.LayoutParams.FILL_PARENT
  val WRAP_CONTENT = ViewGroup.LayoutParams.WRAP_CONTENT

  def <<[LP <: ViewGroupLayoutParams[_,_]](implicit defaultLayoutParam: (V) => LP): LP =
    defaultLayoutParam(basis)

  protected def parentViewGroupIfExists[LP <: ViewGroupLayoutParams[_,_]]
      (implicit defaultLayoutParam: (V) => LP = (v:V)=> null): TraitViewGroup[_] = {
    val lp = defaultLayoutParam(basis)
    if(lp==null) null else lp.parent
  }

  def <<[LP <: ViewGroupLayoutParams[_,_]](width:Int, height:Int)(implicit defaultLayoutParam: (V) => LP): LP = {
    val lp = defaultLayoutParam(basis)
    lp.height = height
    lp.width = width
    lp
  }

  val parentViewGroup: TraitViewGroup[_] = null

  @inline def padding_=(p: Int) = {
    basis.setPadding(p, p, p, p)
    basis
  }

  @inline def padding(p: Int) = padding_=(p)

  @noEquivalentGetterExists
  @inline def padding: Int = 0

  @noEquivalentGetterExists
  @inline def accessibilityDelegate(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'accessibilityDelegate'")
  @inline def accessibilityDelegate  (p: android.view.View.AccessibilityDelegate) =            accessibilityDelegate_=  (p)
  @inline def accessibilityDelegate_=(p: android.view.View.AccessibilityDelegate) = { basis.setAccessibilityDelegate    (p); basis }

  @inline def accessibilityNodeProvider = basis.getAccessibilityNodeProvider

  @inline def activated = basis.isActivated
  @inline def activated  (p: Boolean) =            activated_=  (p)
  @inline def activated_=(p: Boolean) = { basis.setActivated    (p); basis }

  @inline def alpha = basis.getAlpha
  @inline def alpha  (p: Float) =            alpha_=  (p)
  @inline def alpha_=(p: Float) = { basis.setAlpha    (p); basis }

  @inline def animation = basis.getAnimation
  @inline def animation  (p: android.view.animation.Animation) =            animation_=  (p)
  @inline def animation_=(p: android.view.animation.Animation) = { basis.setAnimation    (p); basis }

  @inline def applicationWindowToken = basis.getApplicationWindowToken

  @inline def background = basis.getBackground
  @inline def background  (p: android.graphics.drawable.Drawable) =            background_=  (p)
  @inline def background_=(p: android.graphics.drawable.Drawable) = { basis.setBackground    (p); basis }

  @noEquivalentGetterExists
  @inline def backgroundColor(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'backgroundColor'")
  @inline def backgroundColor  (p: Int) =            backgroundColor_=  (p)
  @inline def backgroundColor_=(p: Int) = { basis.setBackgroundColor    (p); basis }

  @noEquivalentGetterExists
  @inline def backgroundDrawable(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'backgroundDrawable'")
  @inline def backgroundDrawable  (p: android.graphics.drawable.Drawable) =            backgroundDrawable_=  (p)
  @inline def backgroundDrawable_=(p: android.graphics.drawable.Drawable) = { basis.setBackgroundDrawable    (p); basis }

  @noEquivalentGetterExists
  @inline def backgroundResource(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'backgroundResource'")
  @inline def backgroundResource  (p: Int) =            backgroundResource_=  (p)
  @inline def backgroundResource_=(p: Int) = { basis.setBackgroundResource    (p); basis }

  @inline def baseline = basis.getBaseline

  @inline def bottom = basis.getBottom
  @inline def bottom  (p: Int) =            bottom_=  (p)
  @inline def bottom_=(p: Int) = { basis.setBottom    (p); basis }

  @inline def cameraDistance = basis.getCameraDistance
  @inline def cameraDistance  (p: Float) =            cameraDistance_=  (p)
  @inline def cameraDistance_=(p: Float) = { basis.setCameraDistance    (p); basis }

  @inline def clickable = basis.isClickable
  @inline def clickable  (p: Boolean) =            clickable_=  (p)
  @inline def clickable_=(p: Boolean) = { basis.setClickable    (p); basis }

  @inline def contentDescription = basis.getContentDescription
  @inline def contentDescription  (p: java.lang.CharSequence) =            contentDescription_=  (p)
  @inline def contentDescription_=(p: java.lang.CharSequence) = { basis.setContentDescription    (p); basis }

  @inline def context = basis.getContext

  @inline def dirty = basis.isDirty

  @inline def drawableState = basis.getDrawableState

  @inline def drawingCache = basis.getDrawingCache

  @inline def drawingCacheBackgroundColor = basis.getDrawingCacheBackgroundColor
  @inline def drawingCacheBackgroundColor  (p: Int) =            drawingCacheBackgroundColor_=  (p)
  @inline def drawingCacheBackgroundColor_=(p: Int) = { basis.setDrawingCacheBackgroundColor    (p); basis }

  @inline def drawingCacheEnabled = basis.isDrawingCacheEnabled
  @inline def drawingCacheEnabled  (p: Boolean) =            drawingCacheEnabled_=  (p)
  @inline def drawingCacheEnabled_=(p: Boolean) = { basis.setDrawingCacheEnabled    (p); basis }
  @inline def  enableDrawingCache               = { basis.setDrawingCacheEnabled(true ); basis }
  @inline def disableDrawingCache               = { basis.setDrawingCacheEnabled(false); basis }


  @inline def drawingCacheQuality = basis.getDrawingCacheQuality
  @inline def drawingCacheQuality  (p: Int) =            drawingCacheQuality_=  (p)
  @inline def drawingCacheQuality_=(p: Int) = { basis.setDrawingCacheQuality    (p); basis }

  @inline def drawingTime = basis.getDrawingTime

  @inline def duplicateParentStateEnabled = basis.isDuplicateParentStateEnabled
  @inline def duplicateParentStateEnabled  (p: Boolean) =            duplicateParentStateEnabled_=  (p)
  @inline def duplicateParentStateEnabled_=(p: Boolean) = { basis.setDuplicateParentStateEnabled    (p); basis }
  @inline def  enableDuplicateParentState               = { basis.setDuplicateParentStateEnabled(true ); basis }
  @inline def disableDuplicateParentState               = { basis.setDuplicateParentStateEnabled(false); basis }


  @inline def enabled = basis.isEnabled
  @inline def enabled  (p: Boolean) =            enabled_=  (p)
  @inline def enabled_=(p: Boolean) = { basis.setEnabled    (p); basis }

  @noEquivalentGetterExists
  @inline def fadingEdgeLength(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'fadingEdgeLength'")
  @inline def fadingEdgeLength  (p: Int) =            fadingEdgeLength_=  (p)
  @inline def fadingEdgeLength_=(p: Int) = { basis.setFadingEdgeLength    (p); basis }

  @inline def filterTouchesWhenObscured = basis.getFilterTouchesWhenObscured
  @inline def filterTouchesWhenObscured  (p: Boolean) =            filterTouchesWhenObscured_=  (p)
  @inline def filterTouchesWhenObscured_=(p: Boolean) = { basis.setFilterTouchesWhenObscured    (p); basis }

  @inline def fitsSystemWindows = basis.getFitsSystemWindows
  @inline def fitsSystemWindows  (p: Boolean) =            fitsSystemWindows_=  (p)
  @inline def fitsSystemWindows_=(p: Boolean) = { basis.setFitsSystemWindows    (p); basis }

  @inline def focusable = basis.isFocusable
  @inline def focusable  (p: Boolean) =            focusable_=  (p)
  @inline def focusable_=(p: Boolean) = { basis.setFocusable    (p); basis }

  @inline def focusableInTouchMode = basis.isFocusableInTouchMode
  @inline def focusableInTouchMode  (p: Boolean) =            focusableInTouchMode_=  (p)
  @inline def focusableInTouchMode_=(p: Boolean) = { basis.setFocusableInTouchMode    (p); basis }

  @inline def focused = basis.isFocused

  @inline def handler = basis.getHandler

  @inline def hapticFeedbackEnabled = basis.isHapticFeedbackEnabled
  @inline def hapticFeedbackEnabled  (p: Boolean) =            hapticFeedbackEnabled_=  (p)
  @inline def hapticFeedbackEnabled_=(p: Boolean) = { basis.setHapticFeedbackEnabled    (p); basis }
  @inline def  enableHapticFeedback               = { basis.setHapticFeedbackEnabled(true ); basis }
  @inline def disableHapticFeedback               = { basis.setHapticFeedbackEnabled(false); basis }


  @inline def hardwareAccelerated = basis.isHardwareAccelerated

  @inline def hasTransientState  (p: Boolean) =            hasTransientState_=  (p)
  @inline def hasTransientState_=(p: Boolean) = { basis.setHasTransientState    (p); basis }

  @inline def height = basis.getHeight

  @inline def horizontalFadingEdgeEnabled = basis.isHorizontalFadingEdgeEnabled
  @inline def horizontalFadingEdgeEnabled  (p: Boolean) =            horizontalFadingEdgeEnabled_=  (p)
  @inline def horizontalFadingEdgeEnabled_=(p: Boolean) = { basis.setHorizontalFadingEdgeEnabled    (p); basis }
  @inline def  enableHorizontalFadingEdge               = { basis.setHorizontalFadingEdgeEnabled(true ); basis }
  @inline def disableHorizontalFadingEdge               = { basis.setHorizontalFadingEdgeEnabled(false); basis }


  @inline def horizontalFadingEdgeLength = basis.getHorizontalFadingEdgeLength

  @inline def horizontalScrollBarEnabled = basis.isHorizontalScrollBarEnabled
  @inline def horizontalScrollBarEnabled  (p: Boolean) =            horizontalScrollBarEnabled_=  (p)
  @inline def horizontalScrollBarEnabled_=(p: Boolean) = { basis.setHorizontalScrollBarEnabled    (p); basis }
  @inline def  enableHorizontalScrollBar               = { basis.setHorizontalScrollBarEnabled(true ); basis }
  @inline def disableHorizontalScrollBar               = { basis.setHorizontalScrollBarEnabled(false); basis }


  @inline def hovered = basis.isHovered
  @inline def hovered  (p: Boolean) =            hovered_=  (p)
  @inline def hovered_=(p: Boolean) = { basis.setHovered    (p); basis }

  @inline def id = basis.getId
  @inline def id  (p: Int) =            id_=  (p)
  @inline def id_=(p: Int) = { basis.setId    (p); basis }

  @inline def importantForAccessibility = basis.getImportantForAccessibility
  @inline def importantForAccessibility  (p: Int) =            importantForAccessibility_=  (p)
  @inline def importantForAccessibility_=(p: Int) = { basis.setImportantForAccessibility    (p); basis }

  @inline def inEditMode = basis.isInEditMode

  @inline def inTouchMode = basis.isInTouchMode

  @inline def keepScreenOn = basis.getKeepScreenOn
  @inline def keepScreenOn  (p: Boolean) =            keepScreenOn_=  (p)
  @inline def keepScreenOn_=(p: Boolean) = { basis.setKeepScreenOn    (p); basis }

  @inline def keyDispatcherState = basis.getKeyDispatcherState

  @inline def layoutParams = basis.getLayoutParams
  @inline def layoutParams  (p: android.view.ViewGroup.LayoutParams) =            layoutParams_=  (p)
  @inline def layoutParams_=(p: android.view.ViewGroup.LayoutParams) = { basis.setLayoutParams    (p); basis }

  @inline def layoutRequested = basis.isLayoutRequested

  @inline def left = basis.getLeft
  @inline def left  (p: Int) =            left_=  (p)
  @inline def left_=(p: Int) = { basis.setLeft    (p); basis }

  @inline def longClickable = basis.isLongClickable
  @inline def longClickable  (p: Boolean) =            longClickable_=  (p)
  @inline def longClickable_=(p: Boolean) = { basis.setLongClickable    (p); basis }

  @inline def matrix = basis.getMatrix

  @inline def measuredHeight = basis.getMeasuredHeight

  @inline def measuredHeightAndState = basis.getMeasuredHeightAndState

  @inline def measuredState = basis.getMeasuredState

  @inline def measuredWidth = basis.getMeasuredWidth

  @inline def measuredWidthAndState = basis.getMeasuredWidthAndState

  @inline def minimumHeight = basis.getMinimumHeight
  @inline def minimumHeight  (p: Int) =            minimumHeight_=  (p)
  @inline def minimumHeight_=(p: Int) = { basis.setMinimumHeight    (p); basis }

  @inline def minimumWidth = basis.getMinimumWidth
  @inline def minimumWidth  (p: Int) =            minimumWidth_=  (p)
  @inline def minimumWidth_=(p: Int) = { basis.setMinimumWidth    (p); basis }

  @inline def nextFocusDownId = basis.getNextFocusDownId
  @inline def nextFocusDownId  (p: Int) =            nextFocusDownId_=  (p)
  @inline def nextFocusDownId_=(p: Int) = { basis.setNextFocusDownId    (p); basis }

  @inline def nextFocusForwardId = basis.getNextFocusForwardId
  @inline def nextFocusForwardId  (p: Int) =            nextFocusForwardId_=  (p)
  @inline def nextFocusForwardId_=(p: Int) = { basis.setNextFocusForwardId    (p); basis }

  @inline def nextFocusLeftId = basis.getNextFocusLeftId
  @inline def nextFocusLeftId  (p: Int) =            nextFocusLeftId_=  (p)
  @inline def nextFocusLeftId_=(p: Int) = { basis.setNextFocusLeftId    (p); basis }

  @inline def nextFocusRightId = basis.getNextFocusRightId
  @inline def nextFocusRightId  (p: Int) =            nextFocusRightId_=  (p)
  @inline def nextFocusRightId_=(p: Int) = { basis.setNextFocusRightId    (p); basis }

  @inline def nextFocusUpId = basis.getNextFocusUpId
  @inline def nextFocusUpId  (p: Int) =            nextFocusUpId_=  (p)
  @inline def nextFocusUpId_=(p: Int) = { basis.setNextFocusUpId    (p); basis }

  @noEquivalentGetterExists
  @inline def onClickListener(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'onClickListener'")
  @inline def onClickListener  (p: android.view.View.OnClickListener) =            onClickListener_=  (p)
  @inline def onClickListener_=(p: android.view.View.OnClickListener) = { basis.setOnClickListener    (p); basis }

  @noEquivalentGetterExists
  @inline def onCreateContextMenuListener(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'onCreateContextMenuListener'")
  @inline def onCreateContextMenuListener  (p: android.view.View.OnCreateContextMenuListener) =            onCreateContextMenuListener_=  (p)
  @inline def onCreateContextMenuListener_=(p: android.view.View.OnCreateContextMenuListener) = { basis.setOnCreateContextMenuListener    (p); basis }

  @noEquivalentGetterExists
  @inline def onDragListener(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'onDragListener'")
  @inline def onDragListener  (p: android.view.View.OnDragListener) =            onDragListener_=  (p)
  @inline def onDragListener_=(p: android.view.View.OnDragListener) = { basis.setOnDragListener    (p); basis }

  @inline def onFocusChangeListener = basis.getOnFocusChangeListener
  @inline def onFocusChangeListener  (p: android.view.View.OnFocusChangeListener) =            onFocusChangeListener_=  (p)
  @inline def onFocusChangeListener_=(p: android.view.View.OnFocusChangeListener) = { basis.setOnFocusChangeListener    (p); basis }

  @noEquivalentGetterExists
  @inline def onGenericMotionListener(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'onGenericMotionListener'")
  @inline def onGenericMotionListener  (p: android.view.View.OnGenericMotionListener) =            onGenericMotionListener_=  (p)
  @inline def onGenericMotionListener_=(p: android.view.View.OnGenericMotionListener) = { basis.setOnGenericMotionListener    (p); basis }

  @noEquivalentGetterExists
  @inline def onHoverListener(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'onHoverListener'")
  @inline def onHoverListener  (p: android.view.View.OnHoverListener) =            onHoverListener_=  (p)
  @inline def onHoverListener_=(p: android.view.View.OnHoverListener) = { basis.setOnHoverListener    (p); basis }

  @noEquivalentGetterExists
  @inline def onKeyListener(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'onKeyListener'")
  @inline def onKeyListener  (p: android.view.View.OnKeyListener) =            onKeyListener_=  (p)
  @inline def onKeyListener_=(p: android.view.View.OnKeyListener) = { basis.setOnKeyListener    (p); basis }

  @noEquivalentGetterExists
  @inline def onLongClickListener(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'onLongClickListener'")
  @inline def onLongClickListener  (p: android.view.View.OnLongClickListener) =            onLongClickListener_=  (p)
  @inline def onLongClickListener_=(p: android.view.View.OnLongClickListener) = { basis.setOnLongClickListener    (p); basis }

  @noEquivalentGetterExists
  @inline def onSystemUiVisibilityChangeListener(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'onSystemUiVisibilityChangeListener'")
  @inline def onSystemUiVisibilityChangeListener  (p: android.view.View.OnSystemUiVisibilityChangeListener) =            onSystemUiVisibilityChangeListener_=  (p)
  @inline def onSystemUiVisibilityChangeListener_=(p: android.view.View.OnSystemUiVisibilityChangeListener) = { basis.setOnSystemUiVisibilityChangeListener    (p); basis }

  @noEquivalentGetterExists
  @inline def onTouchListener(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'onTouchListener'")
  @inline def onTouchListener  (p: android.view.View.OnTouchListener) =            onTouchListener_=  (p)
  @inline def onTouchListener_=(p: android.view.View.OnTouchListener) = { basis.setOnTouchListener    (p); basis }

  @inline def opaque = basis.isOpaque

  @inline def overScrollMode = basis.getOverScrollMode
  @inline def overScrollMode  (p: Int) =            overScrollMode_=  (p)
  @inline def overScrollMode_=(p: Int) = { basis.setOverScrollMode    (p); basis }

  @inline def paddingBottom = basis.getPaddingBottom

  @inline def paddingLeft = basis.getPaddingLeft

  @inline def paddingRight = basis.getPaddingRight

  @inline def paddingTop = basis.getPaddingTop

  @inline def parent = basis.getParent

  @inline def parentForAccessibility = basis.getParentForAccessibility

  @inline def pivotX = basis.getPivotX
  @inline def pivotX  (p: Float) =            pivotX_=  (p)
  @inline def pivotX_=(p: Float) = { basis.setPivotX    (p); basis }

  @inline def pivotY = basis.getPivotY
  @inline def pivotY  (p: Float) =            pivotY_=  (p)
  @inline def pivotY_=(p: Float) = { basis.setPivotY    (p); basis }

  @inline def pressed = basis.isPressed
  @inline def pressed  (p: Boolean) =            pressed_=  (p)
  @inline def pressed_=(p: Boolean) = { basis.setPressed    (p); basis }

  @inline def resources = basis.getResources

  @inline def right = basis.getRight
  @inline def right  (p: Int) =            right_=  (p)
  @inline def right_=(p: Int) = { basis.setRight    (p); basis }

  @inline def rootView = basis.getRootView

  @inline def rotation = basis.getRotation
  @inline def rotation  (p: Float) =            rotation_=  (p)
  @inline def rotation_=(p: Float) = { basis.setRotation    (p); basis }

  @inline def rotationX = basis.getRotationX
  @inline def rotationX  (p: Float) =            rotationX_=  (p)
  @inline def rotationX_=(p: Float) = { basis.setRotationX    (p); basis }

  @inline def rotationY = basis.getRotationY
  @inline def rotationY  (p: Float) =            rotationY_=  (p)
  @inline def rotationY_=(p: Float) = { basis.setRotationY    (p); basis }

  @inline def saveEnabled = basis.isSaveEnabled
  @inline def saveEnabled  (p: Boolean) =            saveEnabled_=  (p)
  @inline def saveEnabled_=(p: Boolean) = { basis.setSaveEnabled    (p); basis }
  @inline def  enableSave               = { basis.setSaveEnabled(true ); basis }
  @inline def disableSave               = { basis.setSaveEnabled(false); basis }


  @inline def saveFromParentEnabled = basis.isSaveFromParentEnabled
  @inline def saveFromParentEnabled  (p: Boolean) =            saveFromParentEnabled_=  (p)
  @inline def saveFromParentEnabled_=(p: Boolean) = { basis.setSaveFromParentEnabled    (p); basis }
  @inline def  enableSaveFromParent               = { basis.setSaveFromParentEnabled(true ); basis }
  @inline def disableSaveFromParent               = { basis.setSaveFromParentEnabled(false); basis }


  @inline def scaleX = basis.getScaleX
  @inline def scaleX  (p: Float) =            scaleX_=  (p)
  @inline def scaleX_=(p: Float) = { basis.setScaleX    (p); basis }

  @inline def scaleY = basis.getScaleY
  @inline def scaleY  (p: Float) =            scaleY_=  (p)
  @inline def scaleY_=(p: Float) = { basis.setScaleY    (p); basis }

  @inline def scrollBarDefaultDelayBeforeFade = basis.getScrollBarDefaultDelayBeforeFade
  @inline def scrollBarDefaultDelayBeforeFade  (p: Int) =            scrollBarDefaultDelayBeforeFade_=  (p)
  @inline def scrollBarDefaultDelayBeforeFade_=(p: Int) = { basis.setScrollBarDefaultDelayBeforeFade    (p); basis }

  @inline def scrollBarFadeDuration = basis.getScrollBarFadeDuration
  @inline def scrollBarFadeDuration  (p: Int) =            scrollBarFadeDuration_=  (p)
  @inline def scrollBarFadeDuration_=(p: Int) = { basis.setScrollBarFadeDuration    (p); basis }

  @inline def scrollBarSize = basis.getScrollBarSize
  @inline def scrollBarSize  (p: Int) =            scrollBarSize_=  (p)
  @inline def scrollBarSize_=(p: Int) = { basis.setScrollBarSize    (p); basis }

  @inline def scrollBarStyle = basis.getScrollBarStyle
  @inline def scrollBarStyle  (p: Int) =            scrollBarStyle_=  (p)
  @inline def scrollBarStyle_=(p: Int) = { basis.setScrollBarStyle    (p); basis }

  @inline def scrollContainer = basis.isScrollContainer
  @inline def scrollContainer  (p: Boolean) =            scrollContainer_=  (p)
  @inline def scrollContainer_=(p: Boolean) = { basis.setScrollContainer    (p); basis }

  @inline def scrollX = basis.getScrollX
  @inline def scrollX  (p: Int) =            scrollX_=  (p)
  @inline def scrollX_=(p: Int) = { basis.setScrollX    (p); basis }

  @inline def scrollY = basis.getScrollY
  @inline def scrollY  (p: Int) =            scrollY_=  (p)
  @inline def scrollY_=(p: Int) = { basis.setScrollY    (p); basis }

  @inline def scrollbarFadingEnabled = basis.isScrollbarFadingEnabled
  @inline def scrollbarFadingEnabled  (p: Boolean) =            scrollbarFadingEnabled_=  (p)
  @inline def scrollbarFadingEnabled_=(p: Boolean) = { basis.setScrollbarFadingEnabled    (p); basis }
  @inline def  enableScrollbarFading               = { basis.setScrollbarFadingEnabled(true ); basis }
  @inline def disableScrollbarFading               = { basis.setScrollbarFadingEnabled(false); basis }


  @inline def selected = basis.isSelected
  @inline def selected  (p: Boolean) =            selected_=  (p)
  @inline def selected_=(p: Boolean) = { basis.setSelected    (p); basis }

  @inline def shown = basis.isShown

  @inline def solidColor = basis.getSolidColor

  @inline def soundEffectsEnabled = basis.isSoundEffectsEnabled
  @inline def soundEffectsEnabled  (p: Boolean) =            soundEffectsEnabled_=  (p)
  @inline def soundEffectsEnabled_=(p: Boolean) = { basis.setSoundEffectsEnabled    (p); basis }
  @inline def  enableSoundEffects               = { basis.setSoundEffectsEnabled(true ); basis }
  @inline def disableSoundEffects               = { basis.setSoundEffectsEnabled(false); basis }


  @inline def systemUiVisibility = basis.getSystemUiVisibility
  @inline def systemUiVisibility  (p: Int) =            systemUiVisibility_=  (p)
  @inline def systemUiVisibility_=(p: Int) = { basis.setSystemUiVisibility    (p); basis }

  @inline def top = basis.getTop
  @inline def top  (p: Int) =            top_=  (p)
  @inline def top_=(p: Int) = { basis.setTop    (p); basis }

  @inline def touchDelegate = basis.getTouchDelegate
  @inline def touchDelegate  (p: android.view.TouchDelegate) =            touchDelegate_=  (p)
  @inline def touchDelegate_=(p: android.view.TouchDelegate) = { basis.setTouchDelegate    (p); basis }

  @inline def touchables = basis.getTouchables

  @inline def translationX = basis.getTranslationX
  @inline def translationX  (p: Float) =            translationX_=  (p)
  @inline def translationX_=(p: Float) = { basis.setTranslationX    (p); basis }

  @inline def translationY = basis.getTranslationY
  @inline def translationY  (p: Float) =            translationY_=  (p)
  @inline def translationY_=(p: Float) = { basis.setTranslationY    (p); basis }

  @inline def verticalFadingEdgeEnabled = basis.isVerticalFadingEdgeEnabled
  @inline def verticalFadingEdgeEnabled  (p: Boolean) =            verticalFadingEdgeEnabled_=  (p)
  @inline def verticalFadingEdgeEnabled_=(p: Boolean) = { basis.setVerticalFadingEdgeEnabled    (p); basis }
  @inline def  enableVerticalFadingEdge               = { basis.setVerticalFadingEdgeEnabled(true ); basis }
  @inline def disableVerticalFadingEdge               = { basis.setVerticalFadingEdgeEnabled(false); basis }


  @inline def verticalFadingEdgeLength = basis.getVerticalFadingEdgeLength

  @inline def verticalScrollBarEnabled = basis.isVerticalScrollBarEnabled
  @inline def verticalScrollBarEnabled  (p: Boolean) =            verticalScrollBarEnabled_=  (p)
  @inline def verticalScrollBarEnabled_=(p: Boolean) = { basis.setVerticalScrollBarEnabled    (p); basis }
  @inline def  enableVerticalScrollBar               = { basis.setVerticalScrollBarEnabled(true ); basis }
  @inline def disableVerticalScrollBar               = { basis.setVerticalScrollBarEnabled(false); basis }


  @inline def verticalScrollbarPosition = basis.getVerticalScrollbarPosition
  @inline def verticalScrollbarPosition  (p: Int) =            verticalScrollbarPosition_=  (p)
  @inline def verticalScrollbarPosition_=(p: Int) = { basis.setVerticalScrollbarPosition    (p); basis }

  @inline def verticalScrollbarWidth = basis.getVerticalScrollbarWidth

  @inline def viewTreeObserver = basis.getViewTreeObserver

  @inline def visibility = basis.getVisibility
  @inline def visibility  (p: Int) =            visibility_=  (p)
  @inline def visibility_=(p: Int) = { basis.setVisibility    (p); basis }

  @inline def width = basis.getWidth

  @inline def willNotCacheDrawing  (p: Boolean) =            willNotCacheDrawing_=  (p)
  @inline def willNotCacheDrawing_=(p: Boolean) = { basis.setWillNotCacheDrawing    (p); basis }
  @inline def willNotDraw  (p: Boolean) =            willNotDraw_=  (p)
  @inline def willNotDraw_=(p: Boolean) = { basis.setWillNotDraw    (p); basis }

  @inline def windowSystemUiVisibility = basis.getWindowSystemUiVisibility

  @inline def windowToken = basis.getWindowToken

  @inline def windowVisibility = basis.getWindowVisibility

  @inline def x = basis.getX
  @inline def x  (p: Float) =            x_=  (p)
  @inline def x_=(p: Float) = { basis.setX    (p); basis }

  @inline def y = basis.getY
  @inline def y  (p: Float) =            y_=  (p)
  @inline def y_=(p: Float) = { basis.setY    (p); basis }

  @inline def onClick(f: android.view.View => Unit): V = {
    basis.setOnClickListener(new android.view.View.OnClickListener {
      def onClick(p: android.view.View): Unit = { f(p) }
    })
    basis
  }

  @inline def onClick(f: => Unit): V = {
    basis.setOnClickListener(new android.view.View.OnClickListener {
      def onClick(p: android.view.View): Unit = { f }
    })
    basis
  }

  @inline def onCreateContextMenu(f: (android.view.ContextMenu, android.view.View, android.view.ContextMenu.ContextMenuInfo) => Unit): V = {
    basis.setOnCreateContextMenuListener(new android.view.View.OnCreateContextMenuListener {
      def onCreateContextMenu(p1: android.view.ContextMenu, p2: android.view.View, p3: android.view.ContextMenu.ContextMenuInfo): Unit = { f(p1, p2, p3) }
    })
    basis
  }

  @inline def onCreateContextMenu(f: => Unit): V = {
    basis.setOnCreateContextMenuListener(new android.view.View.OnCreateContextMenuListener {
      def onCreateContextMenu(p1: android.view.ContextMenu, p2: android.view.View, p3: android.view.ContextMenu.ContextMenuInfo): Unit = { f }
    })
    basis
  }

  @inline def onDrag(f: (android.view.View, android.view.DragEvent) => Boolean): V = {
    basis.setOnDragListener(new android.view.View.OnDragListener {
      def onDrag(p1: android.view.View, p2: android.view.DragEvent): Boolean = { f(p1, p2) }
    })
    basis
  }

  @inline def onDrag(f: => Boolean): V = {
    basis.setOnDragListener(new android.view.View.OnDragListener {
      def onDrag(p1: android.view.View, p2: android.view.DragEvent): Boolean = { f }
    })
    basis
  }

  @inline def onFocusChange(f: (android.view.View, Boolean) => Unit): V = {
    basis.setOnFocusChangeListener(new android.view.View.OnFocusChangeListener {
      def onFocusChange(p1: android.view.View, p2: Boolean): Unit = { f(p1, p2) }
    })
    basis
  }

  @inline def onFocusChange(f: => Unit): V = {
    basis.setOnFocusChangeListener(new android.view.View.OnFocusChangeListener {
      def onFocusChange(p1: android.view.View, p2: Boolean): Unit = { f }
    })
    basis
  }

  @inline def onGenericMotion(f: (android.view.View, android.view.MotionEvent) => Boolean): V = {
    basis.setOnGenericMotionListener(new android.view.View.OnGenericMotionListener {
      def onGenericMotion(p1: android.view.View, p2: android.view.MotionEvent): Boolean = { f(p1, p2) }
    })
    basis
  }

  @inline def onGenericMotion(f: => Boolean): V = {
    basis.setOnGenericMotionListener(new android.view.View.OnGenericMotionListener {
      def onGenericMotion(p1: android.view.View, p2: android.view.MotionEvent): Boolean = { f }
    })
    basis
  }

  @inline def onHover(f: (android.view.View, android.view.MotionEvent) => Boolean): V = {
    basis.setOnHoverListener(new android.view.View.OnHoverListener {
      def onHover(p1: android.view.View, p2: android.view.MotionEvent): Boolean = { f(p1, p2) }
    })
    basis
  }

  @inline def onHover(f: => Boolean): V = {
    basis.setOnHoverListener(new android.view.View.OnHoverListener {
      def onHover(p1: android.view.View, p2: android.view.MotionEvent): Boolean = { f }
    })
    basis
  }

  @inline def onKey(f: (android.view.View, Int, android.view.KeyEvent) => Boolean): V = {
    basis.setOnKeyListener(new android.view.View.OnKeyListener {
      def onKey(p1: android.view.View, p2: Int, p3: android.view.KeyEvent): Boolean = { f(p1, p2, p3) }
    })
    basis
  }

  @inline def onKey(f: => Boolean): V = {
    basis.setOnKeyListener(new android.view.View.OnKeyListener {
      def onKey(p1: android.view.View, p2: Int, p3: android.view.KeyEvent): Boolean = { f }
    })
    basis
  }

  @inline def onLayoutChange(f: (android.view.View, Int, Int, Int, Int, Int, Int, Int, Int) => Unit): V = {
    basis.addOnLayoutChangeListener(new android.view.View.OnLayoutChangeListener {
      def onLayoutChange(p1: android.view.View, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int, p8: Int, p9: Int): Unit = { f(p1, p2, p3, p4, p5, p6, p7, p8, p9) }
    })
    basis
  }

  @inline def onLayoutChange(f: => Unit): V = {
    basis.addOnLayoutChangeListener(new android.view.View.OnLayoutChangeListener {
      def onLayoutChange(p1: android.view.View, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int, p8: Int, p9: Int): Unit = { f }
    })
    basis
  }

  @inline def onLongClick(f: android.view.View => Boolean): V = {
    basis.setOnLongClickListener(new android.view.View.OnLongClickListener {
      def onLongClick(p: android.view.View): Boolean = { f(p) }
    })
    basis
  }

  @inline def onLongClick(f: => Boolean): V = {
    basis.setOnLongClickListener(new android.view.View.OnLongClickListener {
      def onLongClick(p: android.view.View): Boolean = { f }
    })
    basis
  }

  @inline def onSystemUiVisibilityChange(f: Int => Unit): V = {
    basis.setOnSystemUiVisibilityChangeListener(new android.view.View.OnSystemUiVisibilityChangeListener {
      def onSystemUiVisibilityChange(p: Int): Unit = { f(p) }
    })
    basis
  }

  @inline def onSystemUiVisibilityChange(f: => Unit): V = {
    basis.setOnSystemUiVisibilityChangeListener(new android.view.View.OnSystemUiVisibilityChangeListener {
      def onSystemUiVisibilityChange(p: Int): Unit = { f }
    })
    basis
  }

  @inline def onTouch(f: (android.view.View, android.view.MotionEvent) => Boolean): V = {
    basis.setOnTouchListener(new android.view.View.OnTouchListener {
      def onTouch(p1: android.view.View, p2: android.view.MotionEvent): Boolean = { f(p1, p2) }
    })
    basis
  }

  @inline def onTouch(f: => Boolean): V = {
    basis.setOnTouchListener(new android.view.View.OnTouchListener {
      def onTouch(p1: android.view.View, p2: android.view.MotionEvent): Boolean = { f }
    })
    basis
  }

  @inline def onViewAttachedToWindow(f: android.view.View => Unit): V = {
    basis.addOnAttachStateChangeListener(new android.view.View.OnAttachStateChangeListener {
      def onViewAttachedToWindow(p: android.view.View): Unit = { f(p) }
      def onViewDetachedFromWindow(p: android.view.View): Unit = {  }
    })
    basis
  }

  @inline def onViewAttachedToWindow(f: => Unit): V = {
    basis.addOnAttachStateChangeListener(new android.view.View.OnAttachStateChangeListener {
      def onViewAttachedToWindow(p: android.view.View): Unit = { f }
      def onViewDetachedFromWindow(p: android.view.View): Unit = {  }
    })
    basis
  }

  @inline def onViewDetachedFromWindow(f: android.view.View => Unit): V = {
    basis.addOnAttachStateChangeListener(new android.view.View.OnAttachStateChangeListener {
      def onViewAttachedToWindow(p: android.view.View): Unit = {  }
      def onViewDetachedFromWindow(p: android.view.View): Unit = { f(p) }
    })
    basis
  }

  @inline def onViewDetachedFromWindow(f: => Unit): V = {
    basis.addOnAttachStateChangeListener(new android.view.View.OnAttachStateChangeListener {
      def onViewAttachedToWindow(p: android.view.View): Unit = {  }
      def onViewDetachedFromWindow(p: android.view.View): Unit = { f }
    })
    basis
  }
}

class SView()(implicit context: android.content.Context, override val parentViewGroup: TraitViewGroup[_] = null)
    extends android.view.View(context) with TraitView[SView] {

  val basis = this


}

object SView {
  def apply[LP <: ViewGroupLayoutParams[_, SView]](implicit context: android.content.Context, defaultLayoutParam: SView => LP): SView = {
    val v = new SView
    v.<<.parent.+=(v)
    v
  }

}



class RichViewGroup[V <: android.view.ViewGroup](val basis: V) extends TraitViewGroup[V]

trait TraitViewGroup[V <: android.view.ViewGroup] extends TraitView[V] {


  implicit val pagentVG = this

  def applyStyle(v: View): View = {
    var viw = v
    if (parentViewGroup != null) viw = parentViewGroup.applyStyle(viw)
    styles.foreach { st =>
      if (st.isDefinedAt(viw)) viw = st(viw)
    }
    viw
  }

  def +=(v: View) = {
    var viw = v
    viw = applyStyle(viw)
    basis.addView(viw)
    basis
  }

  val styles = new ArrayBuffer[View PartialFunction View]

  def style(stl: View PartialFunction View) = {
    styles += stl
    basis
  }

  @inline def addStatesFromChildren  (p: Boolean) =            addStatesFromChildren_=  (p)
  @inline def addStatesFromChildren_=(p: Boolean) = { basis.setAddStatesFromChildren    (p); basis }

  @inline def alwaysDrawnWithCacheEnabled = basis.isAlwaysDrawnWithCacheEnabled
  @inline def alwaysDrawnWithCacheEnabled  (p: Boolean) =            alwaysDrawnWithCacheEnabled_=  (p)
  @inline def alwaysDrawnWithCacheEnabled_=(p: Boolean) = { basis.setAlwaysDrawnWithCacheEnabled    (p); basis }
  @inline def  enableAlwaysDrawnWithCache               = { basis.setAlwaysDrawnWithCacheEnabled(true ); basis }
  @inline def disableAlwaysDrawnWithCache               = { basis.setAlwaysDrawnWithCacheEnabled(false); basis }


  @inline def animationCacheEnabled = basis.isAnimationCacheEnabled
  @inline def animationCacheEnabled  (p: Boolean) =            animationCacheEnabled_=  (p)
  @inline def animationCacheEnabled_=(p: Boolean) = { basis.setAnimationCacheEnabled    (p); basis }
  @inline def  enableAnimationCache               = { basis.setAnimationCacheEnabled(true ); basis }
  @inline def disableAnimationCache               = { basis.setAnimationCacheEnabled(false); basis }


  @inline def childCount = basis.getChildCount

  @noEquivalentGetterExists
  @inline def clipChildren(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'clipChildren'")
  @inline def clipChildren  (p: Boolean) =            clipChildren_=  (p)
  @inline def clipChildren_=(p: Boolean) = { basis.setClipChildren    (p); basis }

  @noEquivalentGetterExists
  @inline def clipToPadding(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'clipToPadding'")
  @inline def clipToPadding  (p: Boolean) =            clipToPadding_=  (p)
  @inline def clipToPadding_=(p: Boolean) = { basis.setClipToPadding    (p); basis }

  @inline def descendantFocusability = basis.getDescendantFocusability
  @inline def descendantFocusability  (p: Int) =            descendantFocusability_=  (p)
  @inline def descendantFocusability_=(p: Int) = { basis.setDescendantFocusability    (p); basis }

  @inline def focusedChild = basis.getFocusedChild

  @inline def layoutAnimation = basis.getLayoutAnimation
  @inline def layoutAnimation  (p: android.view.animation.LayoutAnimationController) =            layoutAnimation_=  (p)
  @inline def layoutAnimation_=(p: android.view.animation.LayoutAnimationController) = { basis.setLayoutAnimation    (p); basis }

  @inline def layoutAnimationListener = basis.getLayoutAnimationListener
  @inline def layoutAnimationListener  (p: android.view.animation.Animation.AnimationListener) =            layoutAnimationListener_=  (p)
  @inline def layoutAnimationListener_=(p: android.view.animation.Animation.AnimationListener) = { basis.setLayoutAnimationListener    (p); basis }

  @inline def layoutTransition = basis.getLayoutTransition
  @inline def layoutTransition  (p: android.animation.LayoutTransition) =            layoutTransition_=  (p)
  @inline def layoutTransition_=(p: android.animation.LayoutTransition) = { basis.setLayoutTransition    (p); basis }

  @inline def motionEventSplittingEnabled = basis.isMotionEventSplittingEnabled
  @inline def motionEventSplittingEnabled  (p: Boolean) =            motionEventSplittingEnabled_=  (p)
  @inline def motionEventSplittingEnabled_=(p: Boolean) = { basis.setMotionEventSplittingEnabled    (p); basis }
  @inline def  enableMotionEventSplitting               = { basis.setMotionEventSplittingEnabled(true ); basis }
  @inline def disableMotionEventSplitting               = { basis.setMotionEventSplittingEnabled(false); basis }


  @noEquivalentGetterExists
  @inline def onHierarchyChangeListener(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'onHierarchyChangeListener'")
  @inline def onHierarchyChangeListener  (p: android.view.ViewGroup.OnHierarchyChangeListener) =            onHierarchyChangeListener_=  (p)
  @inline def onHierarchyChangeListener_=(p: android.view.ViewGroup.OnHierarchyChangeListener) = { basis.setOnHierarchyChangeListener    (p); basis }

  @inline def persistentDrawingCache = basis.getPersistentDrawingCache
  @inline def persistentDrawingCache  (p: Int) =            persistentDrawingCache_=  (p)
  @inline def persistentDrawingCache_=(p: Int) = { basis.setPersistentDrawingCache    (p); basis }

  @inline def onAnimationEnd(f: android.view.animation.Animation => Unit): V = {
    basis.setLayoutAnimationListener(new android.view.animation.Animation.AnimationListener {
      def onAnimationStart(p: android.view.animation.Animation): Unit = {  }
      def onAnimationEnd(p: android.view.animation.Animation): Unit = { f(p) }
      def onAnimationRepeat(p: android.view.animation.Animation): Unit = {  }
    })
    basis
  }

  @inline def onAnimationEnd(f: => Unit): V = {
    basis.setLayoutAnimationListener(new android.view.animation.Animation.AnimationListener {
      def onAnimationStart(p: android.view.animation.Animation): Unit = {  }
      def onAnimationEnd(p: android.view.animation.Animation): Unit = { f }
      def onAnimationRepeat(p: android.view.animation.Animation): Unit = {  }
    })
    basis
  }

  @inline def onAnimationRepeat(f: android.view.animation.Animation => Unit): V = {
    basis.setLayoutAnimationListener(new android.view.animation.Animation.AnimationListener {
      def onAnimationStart(p: android.view.animation.Animation): Unit = {  }
      def onAnimationEnd(p: android.view.animation.Animation): Unit = {  }
      def onAnimationRepeat(p: android.view.animation.Animation): Unit = { f(p) }
    })
    basis
  }

  @inline def onAnimationRepeat(f: => Unit): V = {
    basis.setLayoutAnimationListener(new android.view.animation.Animation.AnimationListener {
      def onAnimationStart(p: android.view.animation.Animation): Unit = {  }
      def onAnimationEnd(p: android.view.animation.Animation): Unit = {  }
      def onAnimationRepeat(p: android.view.animation.Animation): Unit = { f }
    })
    basis
  }

  @inline def onAnimationStart(f: android.view.animation.Animation => Unit): V = {
    basis.setLayoutAnimationListener(new android.view.animation.Animation.AnimationListener {
      def onAnimationStart(p: android.view.animation.Animation): Unit = { f(p) }
      def onAnimationEnd(p: android.view.animation.Animation): Unit = {  }
      def onAnimationRepeat(p: android.view.animation.Animation): Unit = {  }
    })
    basis
  }

  @inline def onAnimationStart(f: => Unit): V = {
    basis.setLayoutAnimationListener(new android.view.animation.Animation.AnimationListener {
      def onAnimationStart(p: android.view.animation.Animation): Unit = { f }
      def onAnimationEnd(p: android.view.animation.Animation): Unit = {  }
      def onAnimationRepeat(p: android.view.animation.Animation): Unit = {  }
    })
    basis
  }

  @inline def onChildViewAdded(f: (android.view.View, android.view.View) => Unit): V = {
    basis.setOnHierarchyChangeListener(new android.view.ViewGroup.OnHierarchyChangeListener {
      def onChildViewAdded(p1: android.view.View, p2: android.view.View): Unit = { f(p1, p2) }
      def onChildViewRemoved(p1: android.view.View, p2: android.view.View): Unit = {  }
    })
    basis
  }

  @inline def onChildViewAdded(f: => Unit): V = {
    basis.setOnHierarchyChangeListener(new android.view.ViewGroup.OnHierarchyChangeListener {
      def onChildViewAdded(p1: android.view.View, p2: android.view.View): Unit = { f }
      def onChildViewRemoved(p1: android.view.View, p2: android.view.View): Unit = {  }
    })
    basis
  }

  @inline def onChildViewRemoved(f: (android.view.View, android.view.View) => Unit): V = {
    basis.setOnHierarchyChangeListener(new android.view.ViewGroup.OnHierarchyChangeListener {
      def onChildViewAdded(p1: android.view.View, p2: android.view.View): Unit = {  }
      def onChildViewRemoved(p1: android.view.View, p2: android.view.View): Unit = { f(p1, p2) }
    })
    basis
  }

  @inline def onChildViewRemoved(f: => Unit): V = {
    basis.setOnHierarchyChangeListener(new android.view.ViewGroup.OnHierarchyChangeListener {
      def onChildViewAdded(p1: android.view.View, p2: android.view.View): Unit = {  }
      def onChildViewRemoved(p1: android.view.View, p2: android.view.View): Unit = { f }
    })
    basis
  }
}



trait ViewGroupLayoutParams[LP <: ViewGroupLayoutParams[_,_], V <: View] extends ViewGroup.LayoutParams {
  def basis: LP

  def fill = {
    width = ViewGroup.LayoutParams.MATCH_PARENT
    height = ViewGroup.LayoutParams.MATCH_PARENT
    basis
  }
  def wrap = {
    width = ViewGroup.LayoutParams.WRAP_CONTENT
    height = ViewGroup.LayoutParams.WRAP_CONTENT
    basis
  }

  def parent : TraitViewGroup[_]

  def >> : V
}

trait ViewGroupMarginLayoutParams[LP <: ViewGroupMarginLayoutParams[_,_], V <: View] extends ViewGroup.MarginLayoutParams with ViewGroupLayoutParams[LP, V] {

  def marginBottom(size: Int) = {
    bottomMargin = size
    basis
  }

  def marginTop(size: Int) = {
    topMargin = size
    basis
  }

  def marginLeft(size: Int) = {
    leftMargin = size
    basis
  }

  def marginRight(size: Int) = {
    rightMargin = size
    basis
  }

  def margin(size:Int) = {
    bottomMargin = size
    topMargin = size
    leftMargin = size
    rightMargin = size
    basis
  }

  def margin(top:Int, right:Int, bottom:Int, left:Int) = {
    bottomMargin = bottom
    topMargin = top
    leftMargin = left
    rightMargin = right
    basis
  }
}

class RichMenu[V <: android.view.Menu](val basis: V) extends TraitMenu[V]

trait TraitMenu[V <: android.view.Menu] {

  def basis: V

  @inline def +=(txt: CharSequence) = basis.add(txt)

  @inline def inflate(id: Int)(implicit activity: Activity) = {
    val inflater = activity.getMenuInflater
    inflater.inflate(id, basis)
    true
  }    

}


class RichContextMenu[V <: android.view.ContextMenu](val basis: V) extends TraitContextMenu[V]

trait TraitContextMenu[V <: android.view.ContextMenu] {

  def basis: V



}


class RichSurfaceView[V <: android.view.SurfaceView](val basis: V) extends TraitSurfaceView[V]

trait TraitSurfaceView[V <: android.view.SurfaceView] extends TraitView[V] {




  @noEquivalentGetterExists
  @inline def ZOrderMediaOverlay(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'ZOrderMediaOverlay'")
  @inline def ZOrderMediaOverlay  (p: Boolean) =            ZOrderMediaOverlay_=  (p)
  @inline def ZOrderMediaOverlay_=(p: Boolean) = { basis.setZOrderMediaOverlay    (p); basis }

  @noEquivalentGetterExists
  @inline def ZOrderOnTop(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'ZOrderOnTop'")
  @inline def ZOrderOnTop  (p: Boolean) =            ZOrderOnTop_=  (p)
  @inline def ZOrderOnTop_=(p: Boolean) = { basis.setZOrderOnTop    (p); basis }

  @inline def holder = basis.getHolder


}

class SSurfaceView()(implicit context: android.content.Context, override val parentViewGroup: TraitViewGroup[_] = null)
    extends android.view.SurfaceView(context) with TraitSurfaceView[SSurfaceView] {

  val basis = this


}

object SSurfaceView {
  def apply[LP <: ViewGroupLayoutParams[_, SSurfaceView]](implicit context: android.content.Context, defaultLayoutParam: SSurfaceView => LP): SSurfaceView = {
    val v = new SSurfaceView
    v.<<.parent.+=(v)
    v
  }

}


class RichViewStub[V <: android.view.ViewStub](val basis: V) extends TraitViewStub[V]

trait TraitViewStub[V <: android.view.ViewStub] extends TraitView[V] {




  @inline def inflatedId = basis.getInflatedId
  @inline def inflatedId  (p: Int) =            inflatedId_=  (p)
  @inline def inflatedId_=(p: Int) = { basis.setInflatedId    (p); basis }

  @inline def layoutInflater = basis.getLayoutInflater
  @inline def layoutInflater  (p: android.view.LayoutInflater) =            layoutInflater_=  (p)
  @inline def layoutInflater_=(p: android.view.LayoutInflater) = { basis.setLayoutInflater    (p); basis }

  @inline def layoutResource = basis.getLayoutResource
  @inline def layoutResource  (p: Int) =            layoutResource_=  (p)
  @inline def layoutResource_=(p: Int) = { basis.setLayoutResource    (p); basis }

  @noEquivalentGetterExists
  @inline def onInflateListener(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'onInflateListener'")
  @inline def onInflateListener  (p: android.view.ViewStub.OnInflateListener) =            onInflateListener_=  (p)
  @inline def onInflateListener_=(p: android.view.ViewStub.OnInflateListener) = { basis.setOnInflateListener    (p); basis }

  @inline def onInflate(f: (android.view.ViewStub, android.view.View) => Unit): V = {
    basis.setOnInflateListener(new android.view.ViewStub.OnInflateListener {
      def onInflate(p1: android.view.ViewStub, p2: android.view.View): Unit = { f(p1, p2) }
    })
    basis
  }

  @inline def onInflate(f: => Unit): V = {
    basis.setOnInflateListener(new android.view.ViewStub.OnInflateListener {
      def onInflate(p1: android.view.ViewStub, p2: android.view.View): Unit = { f }
    })
    basis
  }
}


class RichActionProvider[V <: android.view.ActionProvider](val basis: V) extends TraitActionProvider[V]

trait TraitActionProvider[V <: android.view.ActionProvider] {

  def basis: V



  @noEquivalentGetterExists
  @inline def visibilityListener(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'visibilityListener'")
  @inline def visibilityListener  (p: android.view.ActionProvider.VisibilityListener) =            visibilityListener_=  (p)
  @inline def visibilityListener_=(p: android.view.ActionProvider.VisibilityListener) = { basis.setVisibilityListener    (p); basis }

  @inline def visible = basis.isVisible


  @inline def onActionProviderVisibilityChanged(f: Boolean => Unit): V = {
    basis.setVisibilityListener(new android.view.ActionProvider.VisibilityListener {
      def onActionProviderVisibilityChanged(p: Boolean): Unit = { f(p) }
    })
    basis
  }

  @inline def onActionProviderVisibilityChanged(f: => Unit): V = {
    basis.setVisibilityListener(new android.view.ActionProvider.VisibilityListener {
      def onActionProviderVisibilityChanged(p: Boolean): Unit = { f }
    })
    basis
  }
}


