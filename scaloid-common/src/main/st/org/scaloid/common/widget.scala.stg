FrameLayout_concreteBody() ::= <<
implicit def defaultLayoutParams[V <: View](v: V): LayoutParams[V] = new LayoutParams(v)

class LayoutParams[V <: View](v: V) extends FrameLayout.LayoutParams(MATCH_PARENT, WRAP_CONTENT) with ViewGroupMarginLayoutParams[LayoutParams[V], V] {

  def basis = this

  v.setLayoutParams(this)

  def Gravity(g: Int) = {
    gravity = g
    this
  }

  def parent = SFrameLayout.this

  def >\> : V = v

}
>>


RelativeLayout_concreteBody() ::= <<
implicit def defaultLayoutParams[V <: View](v: V): LayoutParams[V] = new LayoutParams(v)

class LayoutParams[V <: View](v: V) extends RelativeLayout.LayoutParams(MATCH_PARENT, WRAP_CONTENT) with ViewGroupMarginLayoutParams[LayoutParams[V], V] {
  def basis = this

  v.setLayoutParams(this)

  def Gravity(g: Int) = {
    gravity = g
    this
  }

  def above(otherView: View)(implicit activity: Activity) = {
    addRule(RelativeLayout.ABOVE, otherView.uniqueId)
    this
  }

  def alignBaseline = {
    addRule(RelativeLayout.ALIGN_BASELINE)
    this
  }

  def alignBottom = {
    addRule(RelativeLayout.ALIGN_BOTTOM)
    this
  }

  //def alignEnd = {
  //  addRule(RelativeLayout.ALIGN_END)
  //  this
  //}

  def alignLeft = {
    addRule(RelativeLayout.ALIGN_LEFT)
    this
  }

  def alignParentBottom = {
    addRule(RelativeLayout.ALIGN_PARENT_BOTTOM)
    this
  }

  //def alignParentEnd = {
  //  addRule(RelativeLayout.ALIGN_PARENT_END)
  //  this
  //}

  def alignParentLeft = {
    addRule(RelativeLayout.ALIGN_PARENT_LEFT)
    this
  }

  def alignParentRight = {
    addRule(RelativeLayout.ALIGN_PARENT_RIGHT)
    this
  }

  //def alignParentStart = {
  //  addRule(RelativeLayout.ALIGN_PARENT_START)
  //  this
  //}

  def alignParentTop = {
    addRule(RelativeLayout.ALIGN_PARENT_TOP)
    this
  }

  def alignRight = {
    addRule(RelativeLayout.ALIGN_RIGHT)
    this
  }

  //def alignStart = {
  //  addRule(RelativeLayout.ALIGN_START)
  //  this
  //}

  def alignTop = {
    addRule(RelativeLayout.ALIGN_TOP)
    this
  }

  def below(otherView: View)(implicit activity: Activity) = {
    addRule(RelativeLayout.BELOW, otherView.uniqueId)
    this
  }

  def leftOf(otherView: View)(implicit activity: Activity) = {
    addRule(RelativeLayout.LEFT_OF, otherView.uniqueId)
    this
  }

  def rightOf(otherView: View)(implicit activity: Activity) = {
    addRule(RelativeLayout.RIGHT_OF, otherView.uniqueId)
    this
  }

  def centerHorizontal = {
    addRule(RelativeLayout.CENTER_HORIZONTAL)
    this
  }

  def centerInParent = {
    addRule(RelativeLayout.CENTER_IN_PARENT)
    this
  }

  def centerVertical = {
    addRule(RelativeLayout.CENTER_VERTICAL)
    this
  }

  def parent = SRelativeLayout.this

  def >\> : V = v

}
>>


LinearLayout_concreteBody() ::= <<
val VERTICAL = LinearLayout.VERTICAL
val HORIZONTAL = LinearLayout.HORIZONTAL

implicit def defaultLayoutParams[V <: View](v: V): LayoutParams[V] = new LayoutParams(v)

class LayoutParams[V <: View](v: V) extends LinearLayout.LayoutParams(MATCH_PARENT, WRAP_CONTENT) with ViewGroupMarginLayoutParams[LayoutParams[V], V] {

  def basis = this

  v.setLayoutParams(this)

  def Gravity(g: Int) = {
    gravity = g
    this
  }

  def Weight(w: Float) = {
    weight = w
    this
  }
  def parent = SLinearLayout.this

  def >\> : V = v

}
>>


ArrayAdapter_concreteBody() ::= <<
def setItem(view: TextView, pos: Int): TextView = {
  getItem(pos) match {
    case i: CharSequence => view.setText(i)
    case i => view.setText(i.toString)
  }
  view
}

override def getView(position: Int, convertView: View, parent: ViewGroup): View = {
  val v = super.getView(position, convertView, parent)
  if (_style != null) _style(v.asInstanceOf[TextView]) else v
}

private var _style: TextView => TextView = null

def style(v: TextView => TextView) = {
  _style = v
  this
}

override def getDropDownView(position: Int, convertView: View, parent: ViewGroup): View = {
  val v = super.getDropDownView(position, convertView, parent)
  if (_dropDownStyle != null) _dropDownStyle(v.asInstanceOf[TextView]) else v
}

private var _dropDownStyle: TextView => TextView = null

def dropDownStyle(v: TextView => TextView) = {
  _dropDownStyle = v
  this
}
>>
