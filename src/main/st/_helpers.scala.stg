delimiters "$", "$"

cap(str) ::= <<$str; format="cap"$>>
decap(str) ::= <<$str; format="decap"$>>


// Class

wholeClassDef(cls, parent, body) ::= <<
$richClassDef(...)$

$concreteClassDef(cls)$

$companionObjectDef(...)$
>>



openRichClassDef(cls, parent, body) ::= <<$_openRichClassDef(cls.simpleName, parent, body)$>>
_openRichClassDef(name, parent, body) ::= <<


class Rich$name$[V <: $name$](val basis: V) extends Trait$name$[V]
@inline implicit def $decap(name)$2Rich$name$[V <: $name$]($decap(name)$: V) = new Rich$name$[V]($decap(name)$)

trait Trait$name$[V <: $name$]$if(parent)$ extends $parent$$endif$ {

  $if( ! cls.isA.View)$def basis: V$endif$
>>

closeRichClassDef(cls) ::= <<
  $properties(cls)$
  $listeners(cls)$
}
>>

richClassDef(cls, parent) ::= <<
$openRichClassDef(...)$
$closeRichClassDef(...)$
>>

withPrefix(name) ::= "S$name$"

openConcreteClassDef(cls) ::= <<
$if(cls.isA.View)$
$_openConcreteViewClassDef(cls.simpleName, withPrefix(cls.simpleName))$
$else$
$_openConcreteNonViewClassDef(cls.simpleName, withPrefix(cls.simpleName))$
$endif$
>>

_openConcreteViewClassDef(name, prefixedName) ::= <<
class $prefixedName$(implicit context: Context, parentVGroup: TraitViewGroup[_] = null)
    extends $name$(context) with Trait$name$[$prefixedName$] {
  def basis = this
  override val parentViewGroup = parentVGroup
>>

_openConcreteNonViewClassDef(name, prefixedName) ::= <<
class $prefixedName$(implicit context: Context)
    extends $name$(context) with Trait$name$[$prefixedName$] {
  def basis = this
>>

closeConcreteClassDef() ::= "}"

concreteClassDef(cls) ::= <<
$openConcreteClassDef(cls)$
$closeConcreteClassDef()$
>>


// companion object

companionObjectDef(cls) ::= <<$_companionObjectDef(cls, cls.simpleName, withPrefix(cls.simpleName))$>>
_companionObjectDef(cls, name, prefixedName) ::= <<
object $prefixedName$ {

  $if(cls.isA.View)$$viewConstructor(...)$$else$$nonViewConstructor(...)$$endif$

  $if(cls.isA.TextView)$$textViewConstructor(...)$$endif$

  $if(cls.isA.Button)$$buttonConstructors(...)$$endif$

}
>>

nonViewConstructor(cls, name, prefixedName) ::= <<
def apply()(implicit context: Context): $prefixedName$ = new $prefixedName$
>>

viewConstructor(cls, name, prefixedName) ::= <<
def apply[LP <: ViewGroupLayoutParams[_, $prefixedName$]]()
    (implicit context: Context, defaultLayoutParam: ($prefixedName$) => LP): $prefixedName$ = {
  val v = (new $prefixedName$)
  v.<<.parent.+=(v)
  v
}
>>

textViewConstructor(cls, name, prefixedName) ::= <<
def apply[LP <: ViewGroupLayoutParams[_, $prefixedName$]](txt: CharSequence)
    (implicit context: Context, defaultLayoutParam: ($prefixedName$) => LP): $prefixedName$ =  {
  val v = (new $prefixedName$)
  v text txt
  v.<<.parent.+=(v)
  v
}  
>>

buttonConstructors(cls, name, prefixedName) ::= <<
def apply[LP <: ViewGroupLayoutParams[_, $prefixedName$]](text: CharSequence, onClickListener: (View) => Unit)
    (implicit context: Context, defaultLayoutParam: ($prefixedName$) => LP): $prefixedName$ = {
  apply(text, func2ViewOnClickListener(onClickListener))
}

def apply[LP <: ViewGroupLayoutParams[_, $prefixedName$]](text: CharSequence, onClickListener: OnClickListener = {})
    (implicit context: Context, defaultLayoutParam: ($prefixedName$) => LP): $prefixedName$ = {
  val v = (new $prefixedName$)
  v.text = text
  v.setOnClickListener(onClickListener)
  v.<<.parent.+=(v)
  v
}
>>


// Listener

paramTypes(types) ::= "($types; separator=\", \"$)"

params(types) ::= "$types:{ t | p$i$: $t$}; separator=\", \"$"

callParams(types) ::= "$types:{ t | p$i$}; separator=\", \"$"

callbackBody(method, isUnit = false) ::= <%
$if(method.hasBody)$
  $if(isUnit)$
    f
  $else$
    f($callParams(method.paramTypes)$)
  $endif$
$endif$
%>

callbackMethod(method, isUnit = false) ::= <<
def $method.name$($params(method.paramTypes)$): $method.retType$ = { $callbackBody(...)$ }
>>

unitCallbackMethod(method) ::= <<$callbackMethod(method, true)$>>

fullListener(l) ::= <<
@inline def $l.name$(f: $paramTypes(l.paramTypes)$ => $l.retType$): V = {
  basis.$l.setter$(new $l.callbackClassName$ {
    $l.callbackMethods:callbackMethod(); separator="\n"$
  })
  basis
}
>>

unitListener(l) ::= <<
@inline def $l.name$(f: => $l.retType$): V = {
  basis.$l.setter$(new $l.callbackClassName$ {
    $l.callbackMethods:unitCallbackMethod(); separator="\n"$
  })
  basis
}
>>

listener(l) ::= <<
$if(l.hasParams)$$fullListener(l)$$endif$

$unitListener(l)$
>>

listeners(cls) ::= <<$cls.listeners:listener(); separator="\n\n"$>>


// property

getter(prop) ::= <<
$if(prop.getter)$
@inline def $prop.name$ = basis.$prop.getter.name$
$elseif( ! prop.nameClashes)$
@noEquivalentGetterExists
@inline def $prop.name$    : $prop.tpe$  = defaultValue[$prop.tpe$]
$endif$
>>

setter(prop, method) ::= <<
@inline def $prop.name$  (p: $method.paramTypes$) =            $prop.name$_=  (p)
@inline def $prop.name$_=(p: $method.paramTypes$) = { basis.$method.name$    (p); basis }
>>

switch(name, setter) ::= <<
@inline def  enable$name$               = { basis.$setter.name$(true ); basis }
@inline def disable$name$               = { basis.$setter.name$(false); basis }
>>

setters(prop) ::= <<
$prop.setters:{ s | $setter(prop, s)$}; separator="\n"$
$if(prop.switch)$
$switch(prop.switch, first(prop.setters))$
$endif$
>>

property(prop) ::= <<$getter(prop)$$setters(prop)$>>

properties(cls) ::= <<$cls.properties:property()$>>


// service

systemServiceHead(cls) ::= <<
@inline def $decap(cls.simpleName)$ (implicit context: Context): $cls.simpleName$ =
  context.getSystemService(Context.$cls.simpleName; format="manager-to-service"$).asInstanceOf[$cls.simpleName$]
>>


// etc

license() ::= <<
/* 
 *
 * 
 *
 *
 * Less painful Android development with Scala
 *
 * http://scaloid.org
 *
 *
 *
 *
 *
 *
 * Copyright 2013 Sung-Ho Lee
 *
 * Sung-Ho Lee licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

/*
 * This file is automatically generated. Any changes on this file will be overwritten!
 */ 

>>
